drv <-JDBC(driverClass = drvName ,classPath = 'c:\\java_hive_lib\\ojdbc6.jar')
drvName <-'oracle.jdbc.driver.oracleDriver';
id<-'ruser';
pwd<-'111111';
url<-'jdbc:orcale:thin:@localhost:1521:XE';
drv <-JDBC(driverClass = drvName ,classPath = 'c:\\java_hive_lib\\ojdbc6.jar')
drv <-JDBC(driverClass = drvName ,classPath = 'c:\\java_hive_lib\\ojdbc6.jar')
library(rJava)
library(RJDBC)
library(DBI)
drvName <-'oracle.jdbc.driver.oracleDriver';
id<-'ruser';
pwd<-'111111';
url<-'jdbc:orcale:thin:@localhost:1521:XE';
drv <-JDBC(driverClass = drvName ,classPath = 'c:\\java_hive_lib\\ojdbc6.jar')
conn<-dbConnect(drv,url,id,pwd)
drvName <-'oracle.jdbc.driver.oracleDriver';
id<-'ruser';
pwd<-'111111';
url<-'jdbc:orcale:thin:@localhost:1521:XE';
drv <-JDBC(driverClass = drvName ,classPath = 'c:\\java_hive_lib\\ojdbc6.jar')
drv <- JDBC(driverClass = drvName,
classPath = 'C:\\java_hive_lib\\ojdbc6.jar')
library(rJava)
library(RJDBC)
library(DBI)
#프로그램에서 DB에 접근하는 과정(자바도 똑같음)
drvName <-'oracle.jdbc.driver.oracleDriver';
id<-'ruser';
pwd<-'111111';
url<-'jdbc:orcale:thin:@localhost:1521:XE';
#1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'C:\\java_hive_lib\\ojdbc6.jar')
install.packages('RJDBC')
install.packages('DBI')
install.packages("RJDBC")
library(rJava)
library(RJDBC)
library(DBI)
drvName <-'oracle.jdbc.driver.oracleDriver';
id<-'ruser';
pwd<-'111111';
url<-'jdbc:orcale:thin:@localhost:1521:XE';
#1. Driver Loading
drv <-JDBC(driverClass = drvName ,classPath = 'c:\\java_hive_lib\\ojdbc6.jar')
drv <-JDBC(driverClass = drvName ,classPath = 'c:\\java_hive_lib\\ojdbc6.jar')
install.packages('Rjava')
library(rJava)
drvName <-'oracle.jdbc.driver.oracleDriver';
id<-'ruser';
pwd<-'111111';
url<-'jdbc:orcale:thin:@localhost:1521:XE';
#1. Driver Loading
drv <-JDBC(driverClass = drvName ,classPath = 'c:\\java_hive_lib\\ojdbc6.jar')
install.packages('rJava')
install.packages("rJava")
library(rJava)
drvName <-'oracle.jdbc.driver.oracleDriver';
id<-'ruser';
pwd<-'111111';
url<-'jdbc:orcale:thin:@localhost:1521:XE';
#1. Driver Loading
drv <-JDBC(driverClass = drvName ,classPath = 'c:\\java_hive_lib\\ojdbc6.jar')
library(RJDBC)
library(DBI)
#1. Driver Loading
drv <-JDBC(driverClass = drvName ,classPath = 'c:\\java_hive_lib\\ojdbc6.jar')
install.packages('RJDBC')
install.packages('DBI')
install.packages('rJava')
install.packages("RJDBC")
library(rJava)
library(RJDBC)
library(DBI)
#프로그램에서 DB에 접근하는 과정(자바도 똑같음)
drvName <-'oracle.jdbc.driver.oracleDriver';
id<-'ruser';
pwd<-'111111';
url<-'jdbc:orcale:thin:@localhost:1521:XE';
#1. Driver Loading
drv <-JDBC(driverClass = drvName ,classPath = 'c:\\java_hive_lib\\ojdbc6.jar')
install.packages('RJDBC')
install.packages('DBI')
install.packages('rJava')
library(rJava)
library(RJDBC)
library(DBI)
drvName <- 'oracle.jdbc.driver.OracleDriver';
id <- 'ruser';
pwd <- '111111';
url <- 'jdbc:oracle:thin:@localhost:1521:XE';
# DB 접근 과정(Java도 똑같음)
# 1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'C:\\java_hive_lib\\ojdbc6.jar')
drvName <-'oracle.jdbc.driver.OracleDriver';
id<-'ruser';
pwd<-'111111';
url<-'jdbc:orcale:thin:@localhost:1521:XE';
#1. Driver Loading
drv <-JDBC(driverClass = drvName ,classPath = 'c:\\java_hive_lib\\ojdbc6.jar')
conn<-dbConnect(drv,url,id,pwd)
#3. Statement         sql문 작성 전송
sqlstr <- 'SELECT * FROM EMP';
#4. ResultSet         값받기(data.frame 형식으로)
emp<-dbGetQuery(conn,sqlstar)
conn<-dbConnect(drv,url,id,pwd)
library(RJDBC)
conn<-dbConnect(drv,url,id,pwd)
conn <- dbConnect(drv, url, id, pwd)
# 3. Statement                    # sql문 작성 전송
sqlstr <- 'select * from emp';
# 4. ResultSet                    # 값 받기  이 때, data.frame으로 받음
emp <- dbGetQuery(sqlstr);
emp <- dbGetQuery(conn,sqlstr);
emp <- dbGetQuery(conn,sqlstr);
conn <- dbConnect(drv, url, id, pwd)
conn <- dbConnect(drv, url, id, pwd)
emp
emp <- dbGetQuery(conn,sqlstr);
drvName <- 'oracle.jdbc.driver.OracleDriver';
id <- 'ruser';
pwd <- '111111';
url <- 'jdbc:oracle:thin:@localhost:1521:XE';
# DB 접근 과정(Java도 똑같음)
# 1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'C:\\java_hive_lib\\ojdbc6.jar')
conn <- dbConnect(drv, url, id, pwd)
# 3. Statement                    # sql문 작성 전송
sqlstr <- 'select * from emp';
emp <- dbGetQuery(conn,sqlstr);
emp
ggplot(data=emp,aes(x=HIREDATE, y=SAL))+geom_line()
library(ggplot2)
ggplot(data=emp,aes(x=HIREDATE, y=SAL))+geom_line()
ggplot(data=emp,aes(x=SAL, y=HIREDATE))+geom_line()
str(emp,1,3)
substr(HIREDATE,5,6)
ggplot(data=emp,aes(x=SAL, y=substr(HIREDATE,5,6))+geom_line()
substr(HIREDATE,5,6))
library(rJava)
library(RJDBC)
library(DBI)
library(ggplot2)
drvName <- 'oracle.jdbc.driver.OracleDriver';
id <- 'ruser';
pwd <- '111111';
url <- 'jdbc:oracle:thin:@localhost:1521:XE';
# DB 접근 과정(Java도 똑같음)
# 1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'C:\\java_hive_lib\\ojdbc6.jar')
# 2. Connection
conn <- dbConnect(drv, url, id, pwd)
# 3. Statement                    # sql문 작성 전송
sqlstr <- 'select * from emp';
# 4. ResultSet                    # 값 받기  이 때, data.frame으로 받음
emp <- dbGetQuery(conn,sqlstr);
# 5. Close
dbDisconnect(conn)
ggplot(data=emp,aes(x=SAL, y=monthsal))+geom_line()
sqlstr <- 'select trunc(months_between(sysdate,HIREDATE)) as monthsal,SAL from emp';
# 4. ResultSet                    # 값 받기  이 때, data.frame으로 받음
emp <- dbGetQuery(conn,sqlstr);
# 5. Close
dbDisconnect(conn)
ggplot(data=emp,aes(x=SAL, y=monthsal))+geom_line()
# 1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'C:\\java_hive_lib\\ojdbc6.jar')
# 2. Connection
conn <- dbConnect(drv, url, id, pwd)
# 3. Statement                    # sql문 작성 전송
sqlstr <- 'select trunc(months_between(sysdate,HIREDATE)) AS monthsal,SAL from emp';
# 4. ResultSet                    # 값 받기  이 때, data.frame으로 받음
emp <- dbGetQuery(conn,sqlstr);
# 5. Close
dbDisconnect(conn)
ggplot(data=emp,aes(x=SAL, y=monthsal))+geom_line()
emp
ggplot(data=emp,aes(x=SAL, y=MONTHSAL))+geom_line()
ggplot(data=emp,aes(x=MONTHSAL, y=SAL))+geom_line()
drvName <- 'oracle.jdbc.driver.OracleDriver';
id <- 'ruser';
pwd <- '111111';
url <- 'jdbc:oracle:thin:@localhost:1521:XE';
# DB 접근 과정(Java도 똑같음)
# 1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'C:\\java_hive_lib\\ojdbc6.jar')
# 2. Connection
conn <- dbConnect(drv, url, id, pwd)
# 3. Statement                    # sql문 작성 전송
sqlstr <- 'select st.main,total_num,total_area,round(score,1)
from status st join satisfaction sa
on st.year = sa.year
where st.main=sa.main
order by score';
# 4. ResultSet                    # 값 받기  이 때, data.frame으로 받음
emp <- dbGetQuery(conn,sqlstr);
# 5. Close
dbDisconnect(conn)
emp
drv <- JDBC(driverClass = drvName,
classPath = 'C:\\java_hive_lib\\ojdbc6.jar')
# 2. Connection
conn <- dbConnect(drv, url, id, pwd)
# 3. Statement                    # sql문 작성 전송
sqlstr <- 'select st.main,total_num,total_area,round(score,1) AS HAPPY
from status st join satisfaction sa
on st.year = sa.year
where st.main=sa.main
order by score';
# 4. ResultSet                    # 값 받기  이 때, data.frame으로 받음
emp <- dbGetQuery(conn,sqlstr);
# 5. Close
dbDisconnect(conn)
emp
ggplot(data=emp,aes(x=MAIN, y=HAPPY))+geom_line()+geom_point()+geom_line(data=emp,aes(x=MAIN, y=TOTAL_AREA))+geom_point(data=emp,aes(x=MAIN, y=TOTAL_AREA))
ggplot(data=emp,aes(x=MAIN, y=HAPPY))+geom_line()+geom_point()+geom_line(data=emp,aes(x=MAIN, y=TOTAL_AREA),colour='red')+geom_point(data=emp,aes(x=MAIN, y=TOTAL_AREA),colour='red')
ggplot(data=emp,aes(x=MAIN, y=HAPPY))+geom_line()
ggplot(data=emp,aes(x=MAIN, y=HAPPY*1000,group=1))+geom_line()+geom_point()
+geom_line(data=emp,aes(x=MAIN, y=TOTAL_AREA),colour='red')+geom_point(data=emp,aes(x=MAIN, y=TOTAL_AREA),colour='red')
ggplot(data=emp,aes(x=MAIN, y=HAPPY*1000,group=1))+geom_line()+geom_point()
+geom_line(data=emp,aes(x=MAIN, y=TOTAL_AREA),colour='red')+geom_point(data=emp,aes(x=MAIN, y=TOTAL_AREA),colour='red')
ggplot(data=emp,aes(x=MAIN, y=HAPPY*1000,group=1))+geom_line()+geom_point()+geom_line(data=emp,aes(x=MAIN, y=TOTAL_AREA),colour='red')+geom_point(data=emp,aes(x=MAIN, y=TOTAL_AREA),colour='red')
ggplot(data=emp,aes(x=MAIN, y=HAPPY*100000,group=1))+geom_line()+geom_point()+geom_line(data=emp,aes(x=MAIN, y=TOTAL_AREA),colour='red')+geom_point(data=emp,aes(x=MAIN, y=TOTAL_AREA),colour='red')
ggplot(data=emp,aes(x=MAIN, y=HAPPY*10000,group=1))+geom_line()+geom_point()+geom_line(data=emp,aes(x=MAIN, y=TOTAL_AREA),colour='red')+geom_point(data=emp,aes(x=MAIN, y=TOTAL_AREA),colour='red')
ggplot(data=emp,aes(x=MAIN, y=HAPPY*1000,group=1))+geom_line()+geom_point()+geom_line(data=emp,aes(x=MAIN, y=TOTAL_AREA),colour='red')+geom_point(data=emp,aes(x=MAIN, y=TOTAL_AREA),colour='red')
library(rJava)
library(RJDBC)
library(DBI)
library(ggplot2)
drvName <- 'org.apache.hive.jdbc.HiveDriver';
id <- 'root';
pwd <- '111111';
url <- 'jdbc:hive2://192.168.111.100:10000';
#라이브러리 디렉토리를 틀래스 Path로 지정합니다
hive_lib <-'c:\\java_hive_lib'
.jinit()
.jaddClassPath(dir(hive_lib,full.names = T))
.jclassPath()
# DB 접근 과정(Java도 똑같음)
# 1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'hive-jdbc-1.0.1.jar')
# 2. Connection
conn <- dbConnect(drv, url, id, pwd)
drvName <- 'org.apache.hive.jdbc.HiveDriver';
id <- 'root';
pwd <- '111111';
url <- 'jdbc:hive2://192.168.111.100:10000';
#라이브러리 디렉토리를 틀래스 Path로 지정합니다
hive_lib <-'c:\\java_hive_lib'
.jinit()
.jaddClassPath(dir(hive_lib,full.names = T))
.jclassPath()
# DB 접근 과정(Java도 똑같음)
# 1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'hive-jdbc-1.0.1.jar')
conn <- dbConnect(drv, url, id, pwd)
conn <- dbConnect(drv, url, id, pwd)
sqlstr <- 'select * FROM airline_delay LIMIT 10';
emp <- dbGetQuery(conn,sqlstr);
# 5. Close
dbDisconnect(conn)
air <- dbGetQuery(conn,sqlstr);
# 5. Close
dbDisconnect(conn)
air
emp <- dbGetQuery(conn,sqlstr);
# 5. Close
dbDisconnect(conn)
emp
air <- dbGetQuery(conn,sqlstr);
# 5. Close
dbDisconnect(conn)
drvName <- 'org.apache.hive.jdbc.HiveDriver';
id <- 'root';
pwd <- '111111';
url <- 'jdbc:hive2://192.168.111.100:10000';
#라이브러리 디렉토리를 틀래스 Path로 지정합니다
hive_lib <-'c:\\java_hive_lib'
.jinit()
.jaddClassPath(dir(hive_lib,full.names = T))
.jclassPath()
# DB 접근 과정(Java도 똑같음)
# 1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'hive-jdbc-1.0.1.jar')
# 2. Connection
conn <- dbConnect(drv, url, id, pwd)
# 3. Statement                    # sql문 작성 전송
sqlstr <- 'select * FROM airline_delay LIMIT 10';
# 4. ResultSet                    # 값 받기  이 때, data.frame으로 받음
air <- dbGetQuery(conn,sqlstr);
# 5. Close
dbDisconnect(conn)
air
ggplot(data=emp,aes(x=airline_delay.year, y= airline_delay.airtime,group=1))+geom_line()+geom_point()
drvName <- 'org.apache.hive.jdbc.HiveDriver';
id <- 'root';
pwd <- '111111';
url <- 'jdbc:hive2://192.168.111.100:10000';
#라이브러리 디렉토리를 틀래스 Path로 지정합니다
hive_lib <-'c:\\java_hive_lib'
.jinit()
.jaddClassPath(dir(hive_lib,full.names = T))
.jclassPath()
# DB 접근 과정(Java도 똑같음)
# 1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'hive-jdbc-1.0.1.jar')
# 2. Connection
conn <- dbConnect(drv, url, id, pwd)
# 3. Statement                    # sql문 작성 전송
sqlstr <- 'select * FROM airline_delay LIMIT 1000';
# 4. ResultSet                    # 값 받기  이 때, data.frame으로 받음
air <- dbGetQuery(conn,sqlstr);
# 5. Close
dbDisconnect(conn)
ggplot(data=air,aes(x=airline_delay.year, y= airline_delay.airtime,group=1))+geom_line()+geom_point()
ggplot(data=air,aes(x=airline_delay.year, y= airline_delay.airtime))+geom_line()+geom_point()
sqlstr <- 'select * FROM airline_delay LIMIT 100';
# 4. ResultSet                    # 값 받기  이 때, data.frame으로 받음
air <- dbGetQuery(conn,sqlstr);
# 5. Close
dbDisconnect(conn)
ggplot(data=air,aes(x=airline_delay.year, y= airline_delay.airtime))+geom_line()+geom_point()
sqlstr <- 'select year FROM airline_delay group by year';
# 4. ResultSet                    # 값 받기  이 때, data.frame으로 받음
air <- dbGetQuery(conn,sqlstr);
# 5. Close
dbDisconnect(conn)
ggplot(data=air,aes(x=airline_delay.year, y= airline_delay.airtime))+geom_line()+geom_point()
air
sqlstr <- 'SELECT Year,Month,COUNT(*) FROM airline_delay where delayYear=2006 AND Month IN (1,2,3,4) AND ArrDelay >0 GROUP BY Year,Month';
air <- dbGetQuery(conn,sqlstr);
# 5. Close
dbDisconnect(conn)
air <- dbGetQuery(conn,sqlstr);
library(rJava)
library(RJDBC)
library(DBI)
library(ggplot2)
drvName <- 'org.apache.hive.jdbc.HiveDriver';
id <- 'root';
pwd <- '111111';
url <- 'jdbc:hive2://192.168.111.100:10000';
#라이브러리 디렉토리를 틀래스 Path로 지정합니다
hive_lib <-'c:\\java_hive_lib'
.jinit()
.jaddClassPath(dir(hive_lib,full.names = T))
.jclassPath()
# DB 접근 과정(Java도 똑같음)
# 1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'hive-jdbc-1.0.1.jar')
# 2. Connection
conn <- dbConnect(drv, url, id, pwd)
# 3. Statement                    # sql문 작성 전송
sqlstr <- 'SELECT Year,Month,COUNT(*) FROM airline_delay where delayYear=2006 AND Month IN (1,2,3,4) AND ArrDelay >0 GROUP BY Year,Month';
# 4. ResultSet                    # 값 받기  이 때, data.frame으로 받음
air <- dbGetQuery(conn,sqlstr);
# 5. Close
dbDisconnect(conn)
air
air
ggplot(data=air,aes(x=airline_delay.year, y= airline_delay.airtime))+geom_line()+geom_point()
ggplot(data=air,aes(x=year, y= _c2))+geom_line()+geom_point()
ggplot(data=air,aes(x=year, y= '_c2'))+geom_line()+geom_point()
ggplot(data=air, aes(x=month, y=`_c2`, group = 1))+
geom_line()+geom_point()
ggplot(data=air, aes(x=month, y=`_c2`))+
geom_line()+geom_point()
# 3. Statement                    # sql문 작성 전송
sqlstr <- 'SELECT Year,Month,COUNT(*) FROM airline_delay where delayYear=2006 AND Month IN (1,2,3,4,5,6,7,8,9,10,11,12) AND ArrDelay >0 GROUP BY Year,Month';
# 4. ResultSet                    # 값 받기  이 때, data.frame으로 받음
air <- dbGetQuery(conn,sqlstr);
# 5. Close
dbDisconnect(conn)
air
library(rJava)
library(RJDBC)
library(DBI)
library(ggplot2)
drvName <- 'org.apache.hive.jdbc.HiveDriver';
id <- 'root';
pwd <- '111111';
url <- 'jdbc:hive2://192.168.111.100:10000';
#라이브러리 디렉토리를 틀래스 Path로 지정합니다
hive_lib <-'c:\\java_hive_lib'
.jinit()
.jaddClassPath(dir(hive_lib,full.names = T))
.jclassPath()
# DB 접근 과정(Java도 똑같음)
# 1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'hive-jdbc-1.0.1.jar')
# 2. Connection
conn <- dbConnect(drv, url, id, pwd)
# 3. Statement                    # sql문 작성 전송
sqlstr <- 'SELECT Year,Month,COUNT(*) FROM airline_delay where delayYear=2006 AND Month IN (1,2,3,4,5,6,7,8,9,10,11,12) AND ArrDelay >0 GROUP BY Year,Month';
# 4. ResultSet                    # 값 받기  이 때, data.frame으로 받음
air <- dbGetQuery(conn,sqlstr);
# 5. Close
dbDisconnect(conn)
air
ggplot(data=air, aes(x=month, y=`_c2`))+
geom_line()+geom_point()
drvName <- 'org.apache.hive.jdbc.HiveDriver';
id <- 'root';
pwd <- '111111';
url <- 'jdbc:hive2://192.168.111.100:10000';
#라이브러리 디렉토리를 틀래스 Path로 지정합니다
hive_lib <-'c:\\java_hive_lib'
.jinit()
.jaddClassPath(dir(hive_lib,full.names = T))
.jclassPath()
# DB 접근 과정(Java도 똑같음)
# 1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'hive-jdbc-1.0.1.jar')
# 2. Connection
conn <- dbConnect(drv, url, id, pwd)
# 3. Statement                    # sql문 작성 전송
sqlstr <- 'SELECT Year,Month,COUNT(*) FROM airline_delay where Month IN (1,2,3,4,5,6,7,8,9,10,11,12) AND ArrDelay >0 GROUP BY Year,Month';
# 4. ResultSet                    # 값 받기  이 때, data.frame으로 받음
air <- dbGetQuery(conn,sqlstr);
# 5. Close
dbDisconnect(conn)
air
air_2006 <- air[air$year == '2006',]
air_2007 <- air[air$year == '2007',]
air_2008 <- air[air$year == '2008',]
air_2006
air_2006 <-cbind(air_2006$year+air_2006$month)
air_2006
air_2006 <- air[air$year == '2006',]
air_2006
air_2006 <-paste(air_2006$year+air_2006$month)
air_2006
air_2006 <-paste(air_2006$year+air_2006$month,sep='')
air_2006 <-paste(air_2006$year,air_2006$month,sep='')
air_2006 <- air[air$year == '2006',]
air_2007 <- air[air$year == '2007',]
air_2008 <- air[air$year == '2008',]
air_2006 <-paste(air_2006$year,'_',air_2006$month,sep='')
air_2006
air_2007 <-paste(air_2007$year,'_',air_2007$month,sep='')
air_2008 <-paste(air_2008$year,'_',air_2008$month,sep='')
air_2006
new_air_06 <- data.frame(date = date06, cnt = air_06$`_c2`)
date06 <-paste(air_2006$year,'_',air_2006$month,sep='')
date07 <-paste(air_2007$year,'_',air_2007$month,sep='')
date08 <-paste(air_2008$year,'_',air_2008$month,sep='')
air_2006 <- air[air$year == '2006',]
air_2007 <- air[air$year == '2007',]
air_2008 <- air[air$year == '2008',]
date06 <-paste(air_2006$year,'_',air_2006$month,sep='')
date07 <-paste(air_2007$year,'_',air_2007$month,sep='')
date08 <-paste(air_2008$year,'_',air_2008$month,sep='')
new_air_06 <- data.frame(date = date06, cnt = air_06$`_c2`)
air_06 <- air[air$year == '2006',]
air_07 <- air[air$year == '2007',]
air_08 <- air[air$year == '2008',]
date06 <-paste(air_2006$year,'_',air_2006$month,sep='')
date07 <-paste(air_2007$year,'_',air_2007$month,sep='')
date08 <-paste(air_2008$year,'_',air_2008$month,sep='')
new_air_06 <- data.frame(date = date06, cnt = air_06$`_c2`)
new_air_07 <- data.frame(date = date07, cnt = air_07$`_c2`)
new_air_08 <- data.frame(date = date08, cnt = air_08$`_c2`)
new_air_06
plot(data=new_air_06,aes(x=date, y=cnt,group=1))+geom_line()+geom_point()
ggplot(data=new_air_06,aes(x=date, y=cnt,group=1))+geom_line()+geom_point()
ggplot(data=new_air_06,aes(x=date, y=cnt,group=1))+geom_line()+geom_point()+geom_line(data=new_air_07,aes(x=date, y=cnt),colour='red')+geom_point(data=new_air_07,aes(x=date, y=cnt),colour='red')
ggplot(data=new_air_06,aes(x=date, y=cnt,group=1))+geom_line()+geom_point()+geom_line(data=new_air_07,aes(x=date, y=cnt),colour='red')+geom_point(data=new_air_07,aes(x=date, y=cnt),colour='red')+geom_line(data=new_air_08,aes(x=date, y=cnt),colour='yellow')+geom_point(data=new_air_08,aes(x=date, y=cnt),colour='yellow')
hive_conn <- function() {
library(rJava)
library(RJDBC)
library(DBI)
library(ggplot2)
library(dplyr)
drvName <- 'org.apache.hive.jdbc.HiveDriver';
id <- 'root';
pwd <- '111111';
url <- 'jdbc:hive2://192.168.111.100:10000';
#라이브러리 디렉토리를 클래스 path로 지정합니다.
hive_lib <- 'C:\\java_hive_lib';
.jinit();
#hive lib에 있는 파일을 클래스파일로 하겠다.
.jaddClassPath(dir(hive_lib, full.names = T));
.jclassPath();
# DB 접근 과정(Java도 똑같음)
# 1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'hive-jdbc-1.0.1.jar')
# 2. Connection
conn <- dbConnect(drv, url, id, pwd)
# 3. Statement                    # sql문 작성 전송
sqlstr <- 'SELECT Year,Month,COUNT(*)
FROM airline_delay
where Month IN (1,2,3,4,6,7,8,9,10,11,12)
AND ArrDelay >0
GROUP BY Year,Month';
# 4. ResultSet                    # 값 받기  이 때, data.frame으로 받음
air <- dbGetQuery(conn, sqlstr);
# 5. Close
dbDisconnect(conn)
